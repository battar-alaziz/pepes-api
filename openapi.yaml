openapi: 3.1.0
info:
  title: API Gateway Management API
  description: API for managing domains, routes, and plugins in an API gateway system
  version: 1.0.0
  contact:
    name: API Gateway Team
servers:
  - url: http://localhost:8081
    description: Development server
  - url: https://api.example.com
    description: Production server

paths:
  /healthz:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /config:
    get:
      summary: Get configuration
      description: Retrieve the current API gateway configuration
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'

  /domains:
    get:
      summary: List domains
      description: Retrieve all domains with optional filtering
      parameters:
        - name: name
          in: query
          description: Filter domains by name (partial match)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Domains retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create domain
      description: Create a new domain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainRequest'
      responses:
        '201':
          description: Domain created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /domains/{id}:
    get:
      summary: Get domain by ID
      description: Retrieve a specific domain by its ID
      parameters:
        - name: id
          in: path
          description: Domain ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Domain retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update domain
      description: Update an existing domain
      parameters:
        - name: id
          in: path
          description: Domain ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainRequest'
      responses:
        '200':
          description: Domain updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete domain
      description: Delete a domain by ID
      parameters:
        - name: id
          in: path
          description: Domain ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Domain deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /routes:
    get:
      summary: List routes
      description: Retrieve all routes with optional filtering
      parameters:
        - name: domain_id
          in: query
          description: Filter routes by domain ID
          required: false
          schema:
            type: integer
            format: int64
        - name: path
          in: query
          description: Filter routes by path (partial match)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Routes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create route
      description: Create a new route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '201':
          description: Route created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /routes/{id}:
    get:
      summary: Get route by ID
      description: Retrieve a specific route by its ID
      parameters:
        - name: id
          in: path
          description: Route ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Route retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update route
      description: Update an existing route
      parameters:
        - name: id
          in: path
          description: Route ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete route
      description: Delete a route by ID
      parameters:
        - name: id
          in: path
          description: Route ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Route deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /plugins:
    get:
      summary: List plugins
      description: Retrieve all plugins with optional filtering
      parameters:
        - name: name_plugin
          in: query
          description: Filter plugins by name (partial match)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Plugins retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create plugin
      description: Create a new plugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginRequest'
      responses:
        '201':
          description: Plugin created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /plugins/{id}:
    get:
      summary: Get plugin by ID
      description: Retrieve a specific plugin by its ID
      parameters:
        - name: id
          in: path
          description: Plugin ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Plugin retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginResponse'
        '404':
          description: Plugin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update plugin
      description: Update an existing plugin
      parameters:
        - name: id
          in: path
          description: Plugin ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePluginRequest'
      responses:
        '200':
          description: Plugin updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Plugin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete plugin
      description: Delete a plugin by ID
      parameters:
        - name: id
          in: path
          description: Plugin ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Plugin deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Plugin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Base Models
    Domain:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the domain
        name:
          type: string
          description: Domain name
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
          description: List of routes associated with this domain
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - name
        - created_at
        - updated_at

    Route:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the route
        path:
          type: string
          description: Route path pattern
        upstream:
          type: string
          description: Upstream service URL
        plugin:
          type: string
          nullable: true
          description: Plugin name to apply to this route
        domain_id:
          type: integer
          format: int64
          description: ID of the domain this route belongs to
        domain:
          $ref: '#/components/schemas/Domain'
          description: Associated domain object
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - path
        - upstream
        - domain_id
        - created_at
        - updated_at

    Plugin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the plugin
        name_plugin:
          type: string
          description: Plugin name
        plugin_svc_name:
          type: string
          description: Plugin service name
        envs:
          type: string
          nullable: true
          description: Environment variables for the plugin
        desc:
          type: string
          nullable: true
          description: Plugin description
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - name_plugin
        - plugin_svc_name
        - created_at
        - updated_at

    # Request Schemas
    CreateDomainRequest:
      type: object
      properties:
        name:
          type: string
          description: Domain name
          example: "api.example.com"
      required:
        - name

    UpdateDomainRequest:
      type: object
      properties:
        name:
          type: string
          description: Domain name
          example: "api.example.com"

    CreateRouteRequest:
      type: object
      properties:
        path:
          type: string
          description: Route path pattern
          example: "/api/v1/users"
        upstream:
          type: string
          description: Upstream service URL
          example: "http://user-service:8080"
        plugin:
          type: string
          nullable: true
          description: Plugin name to apply
          example: "rate-limit"
        domain_id:
          type: integer
          format: int64
          description: ID of the domain this route belongs to
          example: 1
      required:
        - path
        - upstream
        - domain_id

    UpdateRouteRequest:
      type: object
      properties:
        path:
          type: string
          description: Route path pattern
          example: "/api/v1/users"
        upstream:
          type: string
          description: Upstream service URL
          example: "http://user-service:8080"
        plugin:
          type: string
          nullable: true
          description: Plugin name to apply
          example: "rate-limit"
        domain_id:
          type: integer
          format: int64
          description: ID of the domain this route belongs to
          example: 1

    CreatePluginRequest:
      type: object
      properties:
        name_plugin:
          type: string
          description: Plugin name
          example: "rate-limit"
        plugin_svc_name:
          type: string
          description: Plugin service name
          example: "rate-limit-service"
        envs:
          type: string
          nullable: true
          description: Environment variables for the plugin
          example: "RATE_LIMIT=100"
        desc:
          type: string
          nullable: true
          description: Plugin description
          example: "Rate limiting plugin for API protection"
      required:
        - name_plugin
        - plugin_svc_name

    UpdatePluginRequest:
      type: object
      properties:
        name_plugin:
          type: string
          description: Plugin name
          example: "rate-limit"
        plugin_svc_name:
          type: string
          description: Plugin service name
          example: "rate-limit-service"
        envs:
          type: string
          nullable: true
          description: Environment variables for the plugin
          example: "RATE_LIMIT=100"
        desc:
          type: string
          nullable: true
          description: Plugin description
          example: "Rate limiting plugin for API protection"

    # Response Schemas
    DomainResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Domain'

    DomainListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        count:
          type: integer
          description: Number of domains returned

    RouteResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Route'

    RouteListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        count:
          type: integer
          description: Number of routes returned

    PluginResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Plugin'

    PluginListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Plugin'
        count:
          type: integer
          description: Number of plugins returned

    ConfigResponse:
      type: object
      properties:
        data:
          type: object
          description: Configuration data
          additionalProperties: true

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Resource deleted successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Resource not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
